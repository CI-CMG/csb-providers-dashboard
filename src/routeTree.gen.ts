/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProvidersIndexImport } from './routes/providers/index'
import { Route as ProvidersProviderIdImport } from './routes/providers/$providerId'
import { Route as ProvidersProviderIdPlatformIdImport } from './routes/providers/$providerId.$platformId'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProvidersIndexRoute = ProvidersIndexImport.update({
  id: '/providers/',
  path: '/providers/',
  getParentRoute: () => rootRoute,
} as any)

const ProvidersProviderIdRoute = ProvidersProviderIdImport.update({
  id: '/providers/$providerId',
  path: '/providers/$providerId',
  getParentRoute: () => rootRoute,
} as any)

const ProvidersProviderIdPlatformIdRoute =
  ProvidersProviderIdPlatformIdImport.update({
    id: '/$platformId',
    path: '/$platformId',
    getParentRoute: () => ProvidersProviderIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/providers/$providerId': {
      id: '/providers/$providerId'
      path: '/providers/$providerId'
      fullPath: '/providers/$providerId'
      preLoaderRoute: typeof ProvidersProviderIdImport
      parentRoute: typeof rootRoute
    }
    '/providers/': {
      id: '/providers/'
      path: '/providers'
      fullPath: '/providers'
      preLoaderRoute: typeof ProvidersIndexImport
      parentRoute: typeof rootRoute
    }
    '/providers/$providerId/$platformId': {
      id: '/providers/$providerId/$platformId'
      path: '/$platformId'
      fullPath: '/providers/$providerId/$platformId'
      preLoaderRoute: typeof ProvidersProviderIdPlatformIdImport
      parentRoute: typeof ProvidersProviderIdImport
    }
  }
}

// Create and export the route tree

interface ProvidersProviderIdRouteChildren {
  ProvidersProviderIdPlatformIdRoute: typeof ProvidersProviderIdPlatformIdRoute
}

const ProvidersProviderIdRouteChildren: ProvidersProviderIdRouteChildren = {
  ProvidersProviderIdPlatformIdRoute: ProvidersProviderIdPlatformIdRoute,
}

const ProvidersProviderIdRouteWithChildren =
  ProvidersProviderIdRoute._addFileChildren(ProvidersProviderIdRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/providers/$providerId': typeof ProvidersProviderIdRouteWithChildren
  '/providers': typeof ProvidersIndexRoute
  '/providers/$providerId/$platformId': typeof ProvidersProviderIdPlatformIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/providers/$providerId': typeof ProvidersProviderIdRouteWithChildren
  '/providers': typeof ProvidersIndexRoute
  '/providers/$providerId/$platformId': typeof ProvidersProviderIdPlatformIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/providers/$providerId': typeof ProvidersProviderIdRouteWithChildren
  '/providers/': typeof ProvidersIndexRoute
  '/providers/$providerId/$platformId': typeof ProvidersProviderIdPlatformIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/providers/$providerId'
    | '/providers'
    | '/providers/$providerId/$platformId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/providers/$providerId'
    | '/providers'
    | '/providers/$providerId/$platformId'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/providers/$providerId'
    | '/providers/'
    | '/providers/$providerId/$platformId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ProvidersProviderIdRoute: typeof ProvidersProviderIdRouteWithChildren
  ProvidersIndexRoute: typeof ProvidersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ProvidersProviderIdRoute: ProvidersProviderIdRouteWithChildren,
  ProvidersIndexRoute: ProvidersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/providers/$providerId",
        "/providers/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/providers/$providerId": {
      "filePath": "providers/$providerId.tsx",
      "children": [
        "/providers/$providerId/$platformId"
      ]
    },
    "/providers/": {
      "filePath": "providers/index.tsx"
    },
    "/providers/$providerId/$platformId": {
      "filePath": "providers/$providerId.$platformId.tsx",
      "parent": "/providers/$providerId"
    }
  }
}
ROUTE_MANIFEST_END */
